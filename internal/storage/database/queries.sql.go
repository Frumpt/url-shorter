// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
)

const deleteURL = `-- name: DeleteURL :exec
WITH rows AS (
DELETE FROM url
WHERE url.alias = $1
    RETURNING id, alias, url
)
SELECT count(*) FROM rows
`

type DeleteURLParams struct {
	Alias string `db:"alias" json:"alias"`
}

func (q *Queries) DeleteURL(ctx context.Context, arg *DeleteURLParams) error {
	_, err := q.db.Exec(ctx, deleteURL, arg.Alias)
	return err
}

const getURL = `-- name: GetURL :one
SELECT url FROM url
WHERE alias = $1
    LIMIT 1
`

type GetURLParams struct {
	Alias string `db:"alias" json:"alias"`
}

func (q *Queries) GetURL(ctx context.Context, arg *GetURLParams) (string, error) {
	row := q.db.QueryRow(ctx, getURL, arg.Alias)
	var url string
	err := row.Scan(&url)
	return url, err
}

const saveURL = `-- name: SaveURL :one
INSERT INTO url (id, alias, url)
VALUES ($1, $2, $3)
RETURNING id, alias, url
`

type SaveURLParams struct {
	ID    int32  `db:"id" json:"id"`
	Alias string `db:"alias" json:"alias"`
	Url   string `db:"url" json:"url"`
}

func (q *Queries) SaveURL(ctx context.Context, arg *SaveURLParams) (*Url, error) {
	row := q.db.QueryRow(ctx, saveURL, arg.ID, arg.Alias, arg.Url)
	var i Url
	err := row.Scan(&i.ID, &i.Alias, &i.Url)
	return &i, err
}
